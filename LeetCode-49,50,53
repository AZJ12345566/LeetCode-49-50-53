class Solution {
/*
49.字母异位词分组
给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。
字母异位词 是由重新排列源单词的所有字母得到的一个新单词。
*/
  public List<List<String>> groupAnagrams(String[] strs) {
    Map<String, List<String>> map = new HashMap<>();
    for(String str : strs) {
      char[] array = str.toCharArray();
      Arrays.sort(array);
      String key = new String(array);
      List<String> list = map.getOrDefault(key, new ArrayList<>());
      list.add(str);
      map.put(key, list);
    }
    return new ArrayList<List<String>>(map.values());
  }
/*
50.Pow(x, n)
实现 pow(x, n) ，即计算 x 的整数 n 次幂函数（即，xn ）。
*/
  public double myPow(double x, int n) {
    long N = n;
    return n > 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);
  }
  private double quickMul(double x, long N) {
    if(N == 0) {
      return 1.0;
    }
    double y = quickMul(x, N / 2);
    return N % 2 == 0 ? y * y : y * y * x;
  }
/*
53.最大子数组和
给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
子数组是数组中的一个连续部分。
*/ 
  public int maxSubArray(int[] nums) {
    int res = nums[0];
    int pre = 0;
    for(int num : nums) {
      pre = Math.max(num, pre + num);
      res = Math.max(pre, res);
    }
    return res;
  }
}
